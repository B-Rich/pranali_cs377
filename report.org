#+OPTIONS: ^:nil
CS 377
Theme A
Team A3
Progress report submitted March 28th 2014
* Swap space management
** Functions Analysed:
*** ld_load_prog_from_ctxconfig:
   -This function reads the configfile and sets up the context for each process to be executed
   -It then calls the ld_load_exe function to load the program into memory
*** ld_load_exe
   - This function calls elf_open which reads the executable to find out details of its sections and program headers
   - then ld_load_section, ld_load_stack and others are called which will actually create pages for these things and map them to the main memory(of both pranali and current process)
*** ld_load_section/ld_load_stack:
   - this function will map this memory to physical memory using memory_map function
*** memory_map:
   - this function will map memory on the heap(of pranali) to the pages using mem_page_create function if it is not already assosciated to some page(checked using mem_get_page function)
*** mem_get_page:
   - this function will take in a physical memory location and return the corresponding physical page( physical in perspective of this process on pranali)
*** mem_page_create:
   - this function will create a new page in the heap allocated to pranali
** Modifications needed:
*** mem_page_create:
   - new page should now instead be created in the swap space of the process, which will be on the disk, that is simdisk in this case
*** mem_page_get:
   - this should return the page in main memory if available.
   - and invoke the fetching of the page to main memory otherwise.
** new Functions needed:
*** disk_page_create:
   - this function should create a new page on the simdisk in the swap space of the process
*** page_get:
   - this function should fetch the page from swap space (simdisk) to main memory
   - if found in main memory(main for both the process and pranali), we return it
   - else it is a page fault and will be handled as:
   - we will maintain a count for how many pages of a particular process are in memory
   - and we will allocate new space for the page being fetched on the heap if count < max_allowed_count_for_a_process
   - otherwise, we invoke the page replacement function which will free space of a page as per page replacement policy and allocate space for this page being fetched
* Page Fault Handling
** Functions Analysed:
*** mem_page_get
    returns mem page corresponding to an address
    If the page is present, it returns it, otherwise returns NULL
    places the found page at the list head
*** mem_page_get_next
    Returns the memory page following addr in the current memory map. This function is useful to reconstruct consecutive ranges of mapped pages.
    If the page following addr is not found, checks all memory pages to find the one with the lowest tag following addr.
*** mem_page_create
    Creates new mem page
*** mem_page_free
    Frees mem pages
*** mmu_init
     - checks if the page size is a power of 2
     - allocates memory for mmu and its page_list
*** mmu_done
    frees mmu and its page_list
*** mmu_get_page
    calculates hash, tag etc. of the page and looks for the page in the hash.
    If the page is not found, then a new page is created, and in any case, the page is put to the head of the list having the same hash.
*** mmu_translate
      translate virtual address to physical address and returns it
** Modifications needed:
   - The functions used by the memory management unit are not used at all.
     So basically, the OS does not use the virtual memory implementations at all.
     So, they need to be called at appropriate places.
*** mmu_get_page
    - When a page is not found in the memory, it should be fetched from the swap space instead of creating a new page.
    - When it is found that a page has to be replaced (due to space constraints), it should call the page replacement algorithm to choose the page that should be removed from memory.
** New Functions needed
*** getPageToBeRemove: 
    It calls the appropriate page replacement policy and returns that page that should be removed from memory.
*** PageIn:
    It will load the page from the swap space into memory
*** PageOut:
    It will save the page on the swap space, if changes have been done.
